/**
 * StaticFileMaker
 *
 * リソースから静的ファイルを生成します(MovableTypeっぽい機能)。
 * フレンドリーURL機能は有効にする事
 *
 * @category    plugin
 * @version     1.02
 * @license     http://www.gnu.org/copyleft/gpl.html GNU Public License (GPL)
 * @author      soushi
 * @internal    @events        OnDocFormRender,OnDocFormSave,OnManagerLogin,OnWebPageInit,OnManagerPageInit
 * @internal    @modx_category StaticFileMaker
 * @internal    @properties &rebuild_password=静的ファイル生成用パスワード;text; &defaultAction=既定の動作;list;生成する,生成しない;生成する &dirIndexFile=コンテナに付加するファイル名;text;index.html  &changeFilename=出力ファイル名を変更する;textarea;
 */

$eventid=999; //999 = Custom action
$logInfo=1; //情報
$logWarn=2; //警告
$logErr=3;  //エラー

//フレンドリーURLが無効の時は何もしない
if( !($this->config['friendly_urls'] == 1 && $this->config['friendly_alias_urls'] == 1) ){
	if( $this->event->name == 'OnManagerPageInit' ){
		$this->logEvent($eventid,$logWarn,'StaticFileMakerを利用するにはフレンドリーURLを有効にする必要があります。','[plugin]StaticFileMaker');
	}
	return false;
}

//ファイルの生成/削除するときにtrueになる
$runBuildFile = false;
//リソース保存時のPOSTにrebuild_flagが確認できないと削除のみ処理に変わる
$deleteOnly = false;

//デフォルトの生成ルールを決定
if( $defaultAction == '生成する' ){
	$defaultMake = true;
}else{
	$defaultMake = false;
}

//コンテナに付けるファイル名を決定
$dirIndexFile = empty($dirIndexFile)?'index.html':$dirIndexFile;

//特定のファイル名変換
if( !empty($changeFilename) ){
	$tmp = explode("\n",$changeFilename);
	$changeFilename = array();
	foreach( $tmp as $val ){
		$vals = explode(',',$val);
		$changeFilename[$vals[0]] = $vals[1];
	}
}else{
	$changeFilename = array();
}

//生成対象/対象外の判定関数
$makeJudge=function($id,$defaultMake=true){
	global $modx; //クロージャの中で$thisが利用できるのは php5.4 以降

	if( $modx->getPageInfo($id,1,'id') == false ){ //非公開リソースは強制的に生成対象外
		return false;
	}

	$rslt = $defaultMake;

	$sfmOption=$modx->getTemplateVarOutput(array('StaticFileMakerOption'),$id);
	$sfmOption=$sfmOption['StaticFileMakerOption'];

	if( preg_match('/exceptSelf/',$sfmOption) ){ //自分自身の設定
		$rslt = !$rslt;
	}elseif(! preg_match('/makeForce/',$sfmOption) ){ //親リソースからの継承
		$pid=$modx->getParent($id,1,'id');
		if( $pid === false ){ $pid = $modx->getParent($id,0,'id');}
		
		while( $pid !== false ){ //親リソースの設定を確認
			$pid=$pid['id'];
			$sfmOptionParent=$modx->getTemplateVarOutput(array('StaticFileMakerOption'),$pid);
			$sfmOptionParent=$sfmOptionParent['StaticFileMakerOption'];
			if( preg_match('/exceptChildren/',$sfmOptionParent) ){
				$rslt = !$rslt; //反転
				$pid=0;
			}
			$tmp_pid=$modx->getParent($pid,1,'id');
			if( $tmp_pid === false ){ $tmp_pid = $modx->getParent($pid,0,'id');}
			$pid=$tmp_pid;
		}
	}
	return $rslt;
};

//ファイルの生成
$makeStaticFile=function($id,$toUrl,$pwd){
	global $modx; //クロージャの中で$thisが利用できるのは php5.4 以降

	$modxUrl = MODX_SITE_URL . "index.php?id={$id}&__rebuild={$pwd}";
	$content = @file_get_contents($modxUrl);
	
	$urls=preg_split('/\//',$toUrl);
	$filename=array_pop($urls);

	$path=MODX_BASE_PATH;
	foreach($urls as $key => $val){
		if( empty($val) ){continue;}
		$path .= $val.'/';
		if(! is_dir($path) ){
			if(! mkdir($path) ){
				return 'ディレクトリの作成に失敗しました:';
			}
		}
	}
	if( @file_put_contents($path.$filename,$content) === false){
		return 'ファイルの作成に失敗しました:'.$path.$filename;
	}
	return '';

};

switch ($this->event->name) {
case 'OnDocFormRender': //ボタン追加

	$editFlag=0;
	if( !empty($id) ){
		$url=$this->makeUrl($id);
		$editFlag=1;

		$makeEnable=0;
		if( $makeJudge($id,$defaultMake) ){
			$makeEnable=1;
		}
	}

	$output = <<< HTML_END
<input type="hidden" id="rebuild_flag" name="rebuild_flag" value="0" />
<script type="text/javascript">

	//差し込むエレメント
  var el_div = document.getElementById('actions');
  // リストエレメント
  var new_ul = document.createElement("ul");
  new_ul.setAttribute("class", "actionButtons");
  new_ul.setAttribute("style", "margin-top:8px;");

  //ボタン生成 - 再構築
  var newA = document.createElement("a");
  var newText = document.createTextNode("全ファイル生成");
  var newLi = document.createElement("li");
  newA.appendChild( newText );
  newA.setAttribute("href", "#");
  newA.setAttribute("onclick", "window.open('/manager/index.php?a=998&sys=rebuild','rebuildAllFile','width=400, height=500, scrollbars=yes');");
  newLi.appendChild ( newA );
  new_ul.insertBefore( newLi,new_ul.firstChild );

  //ボタン生成 - プレビュー
	if( 1 == $editFlag && 1 == $makeEnable ){
    var newA = document.createElement("a");
    var newText = document.createTextNode("ファイルプレビュー");
    var newLi = document.createElement("li");
    newA.appendChild( newText );
    newA.setAttribute("href", "#");
    newA.setAttribute("onclick", "window.open('$url?__rebuild_pfile=1','previeWinPFile');");
    newLi.appendChild ( newA );
    new_ul.insertBefore( newLi,new_ul.firstChild );
  }

  //ボタン生成 - 保存+ファイル生成
	if( 1 == $makeEnable ){
		var newA = document.createElement("a");
		var newText = document.createTextNode("保存+ファイル生成");
		var newLi = document.createElement("li");
		newA.appendChild( newText );
		newA.setAttribute("href", "#");
		newA.setAttribute("onclick", "if(window.confirm('保存後、静的ファイルを生成を行います(非公開にチェックをいれた場合は削除されます)。')){document.getElementById('rebuild_flag').value='1'; documentDirty=false; document.mutate.action='index.php'; document.mutate.target='main'; document.mutate.save.click();}");
		newLi.appendChild ( newA );
		new_ul.insertBefore( newLi,new_ul.firstChild );
	}

  //差し込み
  el_div.appendChild( new_ul );
</script>
HTML_END;

  $this->event->output($output);
  break;

case 'OnDocFormSave': //ファイル生成
	
	$runBuildFile = true;
	$targetId     = $id;
	$makeChainRs  = true;
	$stdOutput    = false;
	if( $_REQUEST['rebuild_flag'] != '1' ){
		 $deleteOnly = true;
	}

  break;

case 'OnManagerLogin': //プレビューが確認できるようにcookieの生成
	$rebuildCode=md5(rand(1000,9999).time().getmypid());	//適当な文字列を生成
	setcookie('__rebuild',$rebuildCode,0,'/');
	$_SESSION['__rebuild'] = $rebuildCode;
	break;

case 'OnWebPageInit': //cookieとセッション値が合わない場合、隠しパスワードに合致しない場合は404へ
	//ちょっと条件が複雑…
	if( !(
				(
				 (isset($_COOKIE['__rebuild']) && isset($_SESSION['__rebuild']) && $_COOKIE['__rebuild'] == $_SESSION['__rebuild']) ||
				 (isset($_GET['__rebuild']) && $_GET['__rebuild'] == $rebuild_password)
			  ) && $_GET['__rebuild_pfile'] != '1'
			)
		){
		//ファイル生成が無効になっている場合は素直に表示させるためスルー
		if( $makeJudge($this->documentIdentifier,$defaultMake) ){
			$this->sendErrorPage();
		}
	}
	break;

case 'OnManagerPageInit': //全リソースファイル生成
	if( $action == 998 && $_GET['sys']=='rebuild' ){

		//共通フォーム
		$outputForm = <<< HTML_END
<div style="text-align:center;margin-top:50px;">
  <form method="GET" action="/manager/index.php">
    <input type="hidden" id="a" name="a" value="998" />
    <input type="hidden" id="sys" name="sys" value="rebuild" />
    <input type="hidden" id="mode" name="mode" value="rebuild" />
    <input type="submit" value="全ファイル生成">
    <input type="button" onClick="window.close(); return false;" value="ウィンドウを閉じる"><br />
    ※公開状態になっている全リソースのファイルを生成します。<br />
    ※非公開/削除/プライベート設定になっているリソースのファイルは削除します。<br />
    ※リソース数が多いと時間がかかる場合があります。<br />
  </form>
</div>
HTML_END;

		$output = '';
		$mode=isset($_GET['mode'])?$_GET['mode']:'';
		switch ($mode) {
		case 'rebuild':
			$runBuildFile = true;
			$targetId     = '';
			$makeChainRs  = false;
			$stdOutput    = true;
			//$this->event->output($output); //出力は最後に

			break;

		default:
			$this->event->output($outputForm);
			break;
		}
		
	}
	break;
}

// ファイル生成/削除処理
if( $runBuildFile ){
	$listMk=''; //作成したファイル一覧
	$listRm=''; //削除したファイル一覧

	$tbl_site_content = $this->getFullTableName('site_content');

	$where = '';
	if( !empty($targetId) ){
		$where = "id = {$targetId}";	
	}
	$rsRs=$this->db->select('id,published,deleted,privateweb',$tbl_site_content,$where);

	while($rsDetail = $this->db->getRow($rsRs)){
		$url=$this->makeUrl($rsDetail['id'],'','','a');
		if( preg_match('/\/$/',$url) ){
			$url .= $dirIndexFile;
		}
		$tmpFilename = basename($url);
		if( array_key_exists($tmpFilename,$changeFilename) ){
			$url = dirname($url) .  '/' . $changeFilename[$tmpFilename];
			$url = str_replace('//','/',$url);
		}

		$makeEnable=$makeJudge($rsDetail['id'],$defaultMake);
		if( $rsDetail['published']  == 0 ||
				$rsDetail['deleted']    == 1 ||
				$rsDetail['privateweb'] == 1 ||
				$makeEnable == false ){
			//削除
			if( is_file(MODX_BASE_PATH.$url) ){
				$listRm .= $url;
				if( !unlink(MODX_BASE_PATH.$url) ){
					$listRm .= '※削除失敗<br />';
				}else{
					$listRm .= '<br />';
				}
			}
		}elseif( !$deleteOnly ){
			$listMk .= $url;
			$tmperr = $makeStaticFile($rsDetail['id'],$url,$rebuild_password);
			if( !empty($tmperr) ){
				$listMk .= $tmperr;
			}
			$listMk .= '<br />';
		}

		//連動するリソースの処理(StaticFileMakerChainResource)
		if( $makeChainRs ){
			$tv_chnRs=$modx->getTemplateVarOutput(array('StaticFileMakerChainResource'),$rsDetail['id']);
			$tv_chnRs=$tv_chnRs['StaticFileMakerChainResource'];

			//$this->config['StaticFileMakerChainResources'] に値があれば追加する
			if( isset($this->config['StaticFileMakerChainResources']) && !empty($this->config['StaticFileMakerChainResources']) ){
				$tv_chnRs = empty($tv_chnRs)?'':$tv_chnRs.',';
				$tv_chnRs = $tv_chnRs . $this->config['StaticFileMakerChainResources'];
			}

			if( !empty($tv_chnRs) ){
				if( preg_match('/^[0-9][0-9,]+[0-9]$/',$tv_chnRs) ){
					$chnRs=$this->db->query("SELECT id,published,deleted,privateweb FROM $tbl_site_content WHERE id IN ($tv_chnRs);");
					while( $chnRsDetail = $this->db->getRow($chnRs) ){

						$chnUrl=$this->makeUrl($chnRsDetail['id'],'','','a');
						if( preg_match('/\/$/',$chnUrl) ){
							$chnUrl .= $dirIndexFile;
						}
						$tmpFilename = basename($chnUrl);
						if( isset($changeFilename[$tmpFilename]) ){
							$chnUrl = dirname($chnUrl) .  '/' . $changeFilename[$tmpFilename];
							$chnUrl = str_replace('//','/',$chnUrl);
						}

						$makeEnable=$makeJudge($chnRsDetail['id'],$defaultMake);
						if( $chnRsDetail['published']  == 0 ||
								$chnRsDetail['deleted']    == 1 ||
								$chnRsDetail['privateweb'] == 1 ||
								$makeEnable == false ){
							//削除
							if( is_file(MODX_BASE_PATH.$chnUrl) ){
								$listRm .= $chnUrl;
								if( !unlink(MODX_BASE_PATH.$chnUrl) ){
									$listRm .= '※削除失敗<br />';
								}else{
									$listRm .= '<br />';
								}
							}
						}elseif( !$deleteOnly ){
							$listMk .= $chnUrl;
							$tmperr = $makeStaticFile($chnRsDetail['id'],$chnUrl,$rebuild_password);
							if( !empty($tmperr) ){
								$listMk .= $tmperr;
							}
							$listMk .= '<br />';
						}
					}
				}else{
					$this->logEvent($eventid,$logErr,"StaticFileMakerChainResourceの入力値が不正です:{$rsDetail['id']}/{$tv_chnRs}",'[plugin]StaticFileMaker');	
				}
			}
		}
	}

	if( $listMk == '' ){
		$listMk = '生成ファイルなし';
	}
	if( $listRm == '' ){
		$listRm = '削除ファイルなし';
	}

$output= <<< HTML_END
<h3>生成ファイル</h3>
  {$listMk}
<h3>削除ファイル</h3>
  {$listRm}
HTML_END;

	if( $stdOutput ){
		$output = <<< HTML_END
{$outputForm}
<div style="text-align:left;margin-top:20px;margin-left:50px;">
	<h2>ファイル生成完了しました！</h2>
  {$output}
</div>
HTML_END;

		$this->event->output($output);
	}else{
		$this->logEvent($eventid,$logInfo,$output,'[plugin]StaticFileMaker');
	}

}