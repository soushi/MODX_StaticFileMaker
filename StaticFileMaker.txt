/**
 * StaticFileMaker
 *
 * リソースから静的ファイルを生成します(MovableTypeっぽい機能)。
 * フレンドリーURL機能は有効にする事
 *
 * @category    plugin
 * @version     1.00
 * @license     http://www.gnu.org/copyleft/gpl.html GNU Public License (GPL)
 * @author      soushi
 * @internal    @events        OnDocFormRender,OnDocFormSave,OnManagerLogin,OnWebPageInit,OnManagerPageInit
 * @internal    @modx_category StaticFileMaker
 * @internal    @properties &rebuild_password=静的ファイル生成用パスワード;text; &defaultAction=既定の動作;list;生成する,生成しない;生成する
 */

//フレンドリーURLが無効の時は何もしない
if( !($this->config['friendly_urls'] == 1 && $this->config['friendly_alias_urls'] == 1) ){
	$this->logEvent(1,1,'フレンドリーURLを有効にしてください。','[plugin]StaticFileMaker');
	return false;
}

//デフォルトの生成ルールを決定
if( $defaultAction == '生成する' ){
	$defaultMake = true;
}else{
	$defaultMake = false;
}

//生成対象/対象外の判定関数
$makeJudge=function($id,$defaultMake=true){
	global $modx; //クロージャの中で$thisが利用できるのは php5.4 以降

	if( $modx->getPageInfo($id,1,'id') == false ){ //非公開リソースは強制的に生成対象外
		return false;
	}

	$rslt = $defaultMake;

	$sfmOption=$modx->getTemplateVarOutput(array('StaticFileMakerOption'),$id);
	$sfmOption=$sfmOption['StaticFileMakerOption'];

	if( preg_match('/exceptSelf/',$sfmOption) ){ //自分自身の設定
		$rslt = !$rslt;
	}elseif(! preg_match('/makeForce/',$sfmOption) ){ //親リソースからの継承
		$pid=$modx->getParent($id,1,'id');
		if( $pid === false ){ $pid = $modx->getParent($id,0,'id');}
		
		while( $pid !== false ){ //親リソースの設定を確認
			$pid=$pid['id'];
			$sfmOptionParent=$modx->getTemplateVarOutput(array('StaticFileMakerOption'),$pid);
			$sfmOptionParent=$sfmOptionParent['StaticFileMakerOption'];
			if( preg_match('/exceptChildren/',$sfmOptionParent) ){
				$rslt = !$rslt; //反転
				$pid=0;
			}
			$tmp_pid=$modx->getParent($pid,1,'id');
			if( $tmp_pid === false ){ $tmp_pid = $modx->getParent($pid,0,'id');}
			$pid=$tmp_pid;
		}
	}
	return $rslt;
};

switch ($this->event->name) {
case 'OnDocFormRender': //ボタン追加

	$edit_flag=0;
	if( !empty($id) ){
		$url=$this->makeUrl($id);
		$edit_flag=1;

		$makeEnable=0;
		if( $makeJudge($id,$defaultMake) ){
			$makeEnable=1;
		}
	}

	$output = <<< HTML_END
<input type="hidden" id="rebuild_flag" name="rebuild_flag" value="0" />
<script type="text/javascript">

	//差し込むエレメント
  var el_div = document.getElementById('actions');
  // リストエレメント
  var new_ul = document.createElement("ul");
  new_ul.setAttribute("class", "actionButtons");
  new_ul.setAttribute("style", "margin-top:8px;");

  //ボタン生成 - 再構築
  var newA = document.createElement("a");
  var newText = document.createTextNode("全ファイル生成");
  var newLi = document.createElement("li");
  newA.appendChild( newText );
  newA.setAttribute("href", "#");
  newA.setAttribute("onclick", "window.open('/manager/index.php?a=998&sys=rebuild','rebuildAllFile','width=400, height=500, scrollbars=yes');");
  newLi.appendChild ( newA );
  new_ul.insertBefore( newLi,new_ul.firstChild );

  //ボタン生成 - プレビュー
	if( 1 == $edit_flag && 1 == $makeEnable ){
    var newA = document.createElement("a");
    var newText = document.createTextNode("ファイルプレビュー");
    var newLi = document.createElement("li");
    newA.appendChild( newText );
    newA.setAttribute("href", "#");
    newA.setAttribute("onclick", "window.open('$url?__rebuild_pfile=1','previeWinPFile');");
    newLi.appendChild ( newA );
    new_ul.insertBefore( newLi,new_ul.firstChild );
  }

  //ボタン生成 - 保存+ファイル生成
	if( 1 == $makeEnable ){
		var newA = document.createElement("a");
		var newText = document.createTextNode("保存+ファイル生成");
		var newLi = document.createElement("li");
		newA.appendChild( newText );
		newA.setAttribute("href", "#");
		newA.setAttribute("onclick", "if(window.confirm('保存後、静的ファイルを生成を行います(非公開にチェックをいれた場合は削除されます)。')){document.getElementById('rebuild_flag').value='1'; documentDirty=false; document.mutate.save.click();}");
		newLi.appendChild ( newA );
		new_ul.insertBefore( newLi,new_ul.firstChild );
	}

  //差し込み
  el_div.appendChild( new_ul );
</script>
HTML_END;

  $this->event->output($output);
  break;

case 'OnDocFormSave': //ファイル生成
	
	$url=$this->makeUrl($id);
	$makeEnable=$makeJudge($id,$defaultMake);

	$tbl_site_content = $this->getFullTableName('site_content');
	$rs=$this->db->select('id,published,deleted,privateweb',$tbl_site_content,"id={$id}");
	$row = $this->db->getRow($rs);
	if( $row === false ){
		$this->logEvent(1,3,'リソースが見つかりません:'.$id,'[plugin]StaticFileMaker');
	}

	//削除はrebuild_flagに関係なく実施する
	if( $row['published']  == 0 ||
			$row['deleted']    == 1 || //削除の判定は不要だけど一応
			$row['privateweb'] == 1 ||
			$makeEnable == false
			){
		//削除
		if( is_file(MODX_BASE_PATH.$url) ){
			if(! unlink(MODX_BASE_PATH.$url) ){
				$this->logEvent(1,3,'ファイルの削除に失敗しました:'.$url,'[plugin]StaticFileMaker');
			}
		}
	}elseif( $_REQUEST['rebuild_flag'] == '1' && $makeEnable ){
		//生成
		$content = @file_get_contents(MODX_SITE_URL . "index.php?id={$id}&__rebuild={$rebuild_password}");
		$urls=preg_split('/\//',$url);
		$filename=array_pop($urls);
		$path=MODX_BASE_PATH;
		foreach($urls as $key => $val){
			if( empty($val) ){continue;}
			$path .= $val.'/';
			if(! is_dir($path) ){
				if(! mkdir($path) ){
					$this->logEvent(1,3,'ディレクトリの作成に失敗しました:'.$path,'[plugin]StaticFileMaker');
				}
			}
		}
		if( @file_put_contents($path.$filename,$content) === false){
			$this->logEvent(1,3,'ファイルの作成に失敗しました:'.$path.$filename,'[plugin]StaticFileMaker');
		}		
	}
  break;

case 'OnManagerLogin': //プレビューが確認できるようにcookieの生成
	$rebuild_code=md5(rand(1000,9999).time().getmypid());	//適当な文字列を生成
	setcookie('__rebuild',$rebuild_code,0,'/');
	$_SESSION['__rebuild'] = $rebuild_code;
	break;

case 'OnWebPageInit': //cookieとセッション値が合わない場合、隠しパスワードに合致しない場合は404へ
	//ちょっと条件が複雑…
	if( !(
				(
				 (isset($_COOKIE['__rebuild']) && isset($_SESSION['__rebuild']) && $_COOKIE['__rebuild'] == $_SESSION['__rebuild']) ||
				 (isset($_GET['__rebuild']) && $_GET['__rebuild'] == $rebuild_password)
			  ) && $_GET['__rebuild_pfile'] != '1'
			)
		){
		//ファイル生成が無効になっている場合は素直に表示させるためスルー
		if( $makeJudge($this->documentIdentifier,$defaultMake) ){
			$this->sendErrorPage();
		}
	}
	break;

case 'OnManagerPageInit': //全リソースファイル生成
	if( $action == 998 && $_GET['sys']=='rebuild' ){

		//共通フォーム
		$output_form = <<< HTML_END
<div style="text-align:center;margin-top:50px;">
  <form method="GET" action="/manager/index.php">
    <input type="hidden" id="a" name="a" value="998" />
    <input type="hidden" id="sys" name="sys" value="rebuild" />
    <input type="hidden" id="mode" name="mode" value="rebuild" />
    <input type="submit" value="全ファイル生成">
    <input type="button" onClick="window.close(); return false;" value="ウィンドウを閉じる"><br />
    ※公開状態になっている全リソースのファイルを生成します。<br />
    ※非公開/削除/プライベート設定になっているリソースのファイルは削除します。<br />
    ※リソース数が多いと時間がかかる場合があります。<br />
  </form>
</div>
HTML_END;

		$output = '';
		$mode=isset($_GET['mode'])?$_GET['mode']:'';
		switch ($mode) {
		case 'rebuild':
			$list_mk='';
			$list_rm='';
			$tbl_site_content = $this->getFullTableName('site_content');
			$rs=$this->db->select('id,published,deleted,privateweb',$tbl_site_content);
			while($row = $this->db->getRow($rs)){
				$url=$this->makeUrl($row['id']);
				$makeEnable=$makeJudge($row['id'],$defaultMake);

				if( $row['published']  == 0 ||
						$row['deleted']    == 1 ||
						$row['privateweb'] == 1 ||
						$makeEnable == false ){
					//削除
					if( is_file(MODX_BASE_PATH.$url) ){
						$err='';
						if(! unlink(MODX_BASE_PATH.$url) ){
							$err='※削除失敗';
						}
						$list_rm.=$url.$err.'<br >';
					}
				}else{
					//生成(ここの処理は単独の生成ロジックと似てるのでそのうち無名関数くらいにした方がいいかも)
					$content = @file_get_contents(MODX_SITE_URL . "index.php?id={$row['id']}&__rebuild={$rebuild_password}");
					$urls=preg_split('/\//',$url);
					$filename=array_pop($urls);
					$path=MODX_BASE_PATH;
					$err='';
					foreach($urls as $key => $val){
						if( empty($val) ){continue;}
						$path .= $val.'/';
						if(! is_dir($path) ){
							if(! mkdir($path) ){
								$err='※ディレクトリ生成失敗';
							}
						}
					}
					if( @file_put_contents($path.$filename,$content) === false){
						$err='※ファイル生成失敗';
					}
					$list_mk.=$url.$err.'<br >';
				}
			}
			if( $list_mk == '' ){
				$list_mk = '生成ファイルなし';
			}
			if( $list_rm == '' ){
				$list_rm = '削除ファイルなし';
			}

			$output = <<< HTML_END
{$output_form}
<div style="text-align:left;margin-top:20px;margin-left:50px;">
	<h2>ファイル生成完了しました！</h2>
	<h3>生成ファイル</h3>
	{$list_mk}
	<h3>削除ファイル</h3>
	{$list_rm}
</div>
HTML_END;

			$this->event->output($output);

			break;

		default:
			$this->event->output($output_form);
			break;
		}
		
	}
	break;
}

